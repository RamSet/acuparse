#!/usr/bin/env bash

##
# Acuparse - AcuRite Access/smartHUB and IP Camera Data Processing, Display, and Upload.
# @copyright Copyright (C) 2015-2021 Maxwell Power
# @author Maxwell Power <max@acuparse.com>
# @link http://www.acuparse.com
# @license AGPL-3.0+
#
# This code is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this code. If not, see <http://www.gnu.org/licenses/>.
##

##
# File: .docker/docker-entrypoint
# Startup and Configure Container
##

if [ "$1" = 'acuparse' ]; then
  function _enable_lets_encrypt() {
    if [[ ("$LE_SECURE_WWW" == "yes") ]]; then
      LE_SECURE_DOMAINS=(-d "$LE_FQDN" -d www."$LE_FQDN")
      sed -i "s/#ServerName/ServerName ${LE_FQDN}\n    ServerAlias www.${LE_FQDN}/g" /etc/apache2/sites-available/acuparse-ssl.conf
    else
      LE_SECURE_DOMAINS=(-d "$LE_FQDN")
      sed -i "s/#ServerName/ServerName ${LE_FQDN}/g" /etc/apache2/sites-available/acuparse-ssl.conf
    fi

    if [[ ("$LE_REDIRECT_ENABLED" == 1 || "$LE_REDIRECT_ENABLED" == "yes") ]]; then
      LE_REDIRECT="redirect"
    else
      LE_REDIRECT="no-redirect"
    fi

    echo "Requesting CERTIFICATE"
    if [[ ("$LE_STAGING" == 1 || "$LE_STAGING" == "yes") ]]; then
      certbot -n --staging --authenticator standalone --installer apache --agree-tos --"${LE_REDIRECT}" --email "${LE_EMAIL}" "${LE_SECURE_DOMAINS[@]}"
    else
      certbot -n --authenticator standalone --installer apache --agree-tos --"${LE_REDIRECT}" --email "${LE_EMAIL}" "${LE_SECURE_DOMAINS[@]}"
    fi

    service apache2 stop
  }

  function _set_system_timezone() {
    rm /etc/localtime
    rm /etc/timezone
    ln -s ../usr/share/zoneinfo/"${TZ}" /etc/localtime
    echo "${TZ}" >/etc/timezone
  }

  function _install_system_crontab() {
    ACUPARSE_MAIN_CRON='* * * * * /usr/local/bin/php /opt/acuparse/cron/cron.php > /opt/acuparse/logs/cron.log 2>&1'
    ACUPARSE_BACKUP_CRON='5 0 * * * /bin/bash /opt/acuparse/cron/backup > /opt/acuparse/logs/backup.log 2>&1'
    printf "%s\n%s\n" "$ACUPARSE_MAIN_CRON" "$ACUPARSE_BACKUP_CRON" | crontab -
    env | grep -E MYSQL\|TZ >>/etc/environment
  }

  function _start_system_services() {
    echo "Starting syslog ..."
    service rsyslog start

    echo "Starting cron ..."
    service cron start

    echo "Starting apache2 ..."
    apache2ctl start

    echo "Checking Services after startup ..."

    echo "Checking syslog ..."
    service rsyslog status || exit 1

    echo "Checking cron ..."
    service cron status || exit 1

    echo "Checking Apache2 ..."
    service apache2 status || exit 1
  }

  function _check_default_config() {
    if [ -z "$(ls -A '/opt/acuparse/src/usr/')" ]; then
      echo "Empty config dir found, copying config template"
      cp /var/opt/acuparse/config/config.new.php /opt/acuparse/src/usr/config.new.php
      chown -R www-data:www-data /opt/acuparse/src/usr
    fi
  }

  function _enable_debug() {
    echo "NOTICE: DEBUG MODE ENABLED"
    export DEBIAN_FRONTEND=noninteractive
    apt-get update && apt-get install nano inetutils-tools net-tools iproute2 -yqq
    mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"
    ln -sf /proc/1/fd/1 /var/log/apache2/error.log
    ln -sf /proc/1/fd/1 /opt/acuparse/logs/cron.log
    apt-get clean
    rm -rf /var/lib/apt/lists/*
    unset DEBIAN_FRONTEND
  }

  function _enable_mail_relay() {
    echo "NOTICE: Mail Relay Enabled"
    export DEBIAN_FRONTEND=noninteractive
    apt-get update && apt-get install nullmailer mailutils -yqq
    echo "$SMTP_HOST" >/etc/nullmailer/remotes
    service nullmailer restart
    apt-get clean
    rm -rf /var/lib/apt/lists/*
    unset DEBIAN_FRONTEND
  }

  function _check_database_permissions() {
    if [ -z "$(mysql -h"${MYSQL_HOSTNAME}" -p"${MYSQL_ROOT_PASSWORD}" -e "use mysql; SELECT super_priv FROM user where user='acuparse' AND super_priv='Y';")" ]; then
      echo "Updating DB User Permissions"
      mysql -h"${MYSQL_HOSTNAME}" -p"${MYSQL_ROOT_PASSWORD}" -e "GRANT ALL ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'; GRANT SUPER, EVENT ON *.* TO '${MYSQL_USER}'; FLUSH PRIVILEGES;" || exit 1
    fi
  }

  echo "Starting Acuparse Container"

  echo "Configuring Timezone"
  if [ -n "${TZ}" ]; then
    _set_system_timezone
  elif [ "$2" = 'manual' ]; then
    echo "Manual Startup Requested"
  else
    echo "ERROR: Missing Timezone Environment Variable!"
    exit 1
  fi
  echo "DONE: Configuring Timezone"

  echo "Installing CRONTAB"
  _install_system_crontab
  echo "DONE: Installing CRONTAB"

  echo "Checking default CONFIG ..."
  _check_default_config
  echo "DONE: Checking CONFIG"

  if [[ ("$DEBUG_ENABLED" == 1 || "$DEBUG_ENABLED" == "yes") ]]; then
    _enable_debug
  fi

  echo "Check SQL Database"
  if [ -n "${MYSQL_HOSTNAME}" ] && [ -n "${MYSQL_PASSWORD}" ]; then
    echo "Waiting for database to initialize ..."
    while ! mysqladmin ping -h"${MYSQL_HOSTNAME}" -p"${MYSQL_PASSWORD}" --silent; do
      sleep 1
    done
    echo "Checking SQL PERMISSIONS"
    _check_database_permissions
    echo "DONE: SQL PERMISSIONS"
  elif [ "$2" = 'manual' ]; then
    echo "DEBUG: Manual SQL Startup Requested"
  else
    echo "ERROR: Missing SQL Environment Variables"
    exit 1
  fi

  echo "Check SSL Certificate"
  if [[ ("$LE_ENABLED" == 1 || "$LE_ENABLED" == "yes") ]]; then
    _enable_lets_encrypt
  else
    echo "Certificate Disabled"
  fi
  echo "DONE: SSL CERTIFICATE"

  echo "Check Mail Relay"
  if [[ ("$SMTP_RELAY" == 1 || "$SMTP_RELAY" == "yes") ]]; then
    _enable_mail_relay
  else
    echo "Mail Relay Disabled"
  fi
  echo "DONE: MAIL RELAY"

  echo "Starting System SERVICES ..."
  _start_system_services
  echo "DONE: Starting SERVICES"

  echo "Acuparse Startup Complete!"
  echo "Passing container control to HEALTHCHECK service ..."
  exec docker-healthcheck
else
  exec "$@"
fi
