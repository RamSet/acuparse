#!/bin/bash

##
# Acuparse - AcuRite Access/smartHUB and IP Camera Data Processing, Display, and Upload.
# @copyright Copyright (C) 2015-2021 Maxwell Power
# @author Maxwell Power <max@acuparse.com>
# @link http://www.acuparse.com
# @license AGPL-3.0+
#
# This code is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this code. If not, see <http://www.gnu.org/licenses/>.
##

##
# File: cam/templates/combined
# IP camera shell script
##

function _getImage() {
  if [ "$USE_RTSP" == 0 ]; then
    # HTTP Snapshot
    curl "${CAMERA_HOST}" --output "${CAMERA_FILENAME}"
  else
    # RTSP Snapshot
    ffmpeg -rtsp_transport tcp -loglevel fatal -i "$CAMERA_HOST" -vframes 1 -r 1 "$CAMERA_FILENAME"
  fi
}

function _timestamp() {
  echo "Applying Timestamp and Copyright"
  convert "${CAMERA_FILENAME}" \
    -resize "${RESIZE}"! \
    -font DejaVu-Sans-Bold -pointsize 20 \
    -draw "gravity south \
        fill black  text 0,36 '$TIMESTAMP' \
        fill OrangeRed2  text 1,37 '$TIMESTAMP' " \
    -font DejaVu-Sans-Bold -pointsize 12 \
    -draw "gravity south \
        fill black  text 0,0 '$WATERMARK' \
        fill OrangeRed2  text 1,1 '$WATERMARK' " \
    image.jpg
}

function _localArchive() {
  ARCHIVE=$(date +"%F_%H%M")
  mkdir -p "${ARCHIVE_DIR}"/"$(date +%Y)"
  FOLDER="$(date +%Y)"
  convert "$CAMERA_FILENAME" \
    -font DejaVu-Sans-Bold -pointsize 16 \
    -draw "gravity south \
     fill black  text 0,36 '$TIMESTAMP' \
      fill OrangeRed2  text 1,37 '$TIMESTAMP' " \
    archive.jpg
  mv archive.jpg "${ARCHIVE_DIR}"/"${FOLDER}"/"${ARCHIVE}".jpg
}

function _remoteServer() {
  scp image.jpg "${REMOTE_USER}"@"${REMOTE_HOST}":"${REMOTE_TMP}"
}

function _runRemote() {
  # shellcheck disable=SC2029
  ssh "${REMOTE_USER}"@"${REMOTE_HOST}" 'bash ' "${REMOTE_SCRIPT}"
}

function _watermark() {
  convert image.jpg \
    -font DejaVu-Sans-Bold -pointsize 12 \
    -draw "gravity south \
        fill black  text 0,18 '$STATION_INFO' \
        fill OrangeRed2  text 1,19 '$STATION_INFO' " \
    image.jpg
}

function _wuUpload() {
  ftp -nv webcam.wunderground.com <<EOF >/opt/acuparse/logs/wu_upload.log 2>&1
quote USER $WU_CAM_DEVICE
quote PASS $WU_CAM_KEY
binary
put image.jpg
quit
EOF
}

function _moveImage() {
  cp image.jpg "${WEBDIR}"/latest.jpg
  mkdir -p "${WEBDIR}"/"${ARCHIVE_DATE}"
  cp image.jpg "${WEBDIR}"/"${ARCHIVE_DATE}"/"${ARCHIVE_TIME}".jpg
  chown -R "${APACHE_USER}":"${APACHE_GROUP}" "${WEBDIR}"
  convert -delay 25 -loop 0 "${WEBDIR}"/"${ARCHIVE_DATE}"/*.jpg "${WEBDIR}"/"${ARCHIVE_DATE}"/daily.gif
}
# shellcheck source=/builds/acuparse/acuparse/cam/templates/config.env
source /opt/acuparse/cam/config.env

if [ "$MODE" == '' ]; then
  echo "Config Missing"
  exit 1
fi

if [ "$MODE" == 'combined' ] || [ "$MODE" == 'local' ]; then
  cd "${BASEDIR}" || exit 1

  echo "Getting camera image"
  _getImage

  echo "Processing image and adding Timestamp"
  _timestamp

  if [ "$MODE" == 'local' ]; then

    echo "Sending image to remote server for processing"
    _remoteServer

    echo "START: Running remote commands"
    _runRemote
  fi

  if [ "$LOCAL_ARCHIVE" == 1 ]; then
    echo "Archiving"
    _localArchive
  fi

fi

if [ "$MODE" == 'combined' ] || [ "$MODE" == 'remote' ]; then
  cd "${BASEDIR}" || exit 1

  echo "Applying Weather Info Watermark"
  _watermark

  if [ "$WU_UPLOAD" == 1 ]; then
    echo "Sending image to Weather Underground"
    _wuUpload
  fi

  echo "Moving image to webserver and updating animation"
  _moveImage

fi

if [ "$MODE" == 'combined' ] || [ "$MODE" == 'local' ]; then
  echo "Cleaning LOCAL TMP"
  rm image.jpg*
  rm "${CAMERA_FILENAME}"*
  echo "Done: LOCAL/COMBINED"
elif [ "$MODE" == 'remote' ]; then
  echo "Cleaning REMOTE TMP"
  rm image.jpg*
  echo "END: Running remote commands"
fi
